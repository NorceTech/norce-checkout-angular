/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
    "/api/checkout/v1/callback/orders/{order_id}/payments/{payment_id}/cart-changed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Handle Cart changed
         * @deprecated
         * @description Cart changed.
         */
        post: operations["CartChanged"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/checkout/v1/callback/orders/{order_id}/payments/{payment_id}/shipping-changed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Handle shipping changed.
         * @deprecated
         * @description Shipping changed.
         */
        post: operations["ShippingChanged"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/checkout/v1/callback/orders/{order_id}/payments/{payment_id}/update-payment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update payment
         * @description Hook on changes to update payment.
         */
        post: operations["UpdatePayment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/checkout/v1/callback/orders/{order_id}/payments/{payment_id}/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Validate */
        post: operations["Validate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/checkout/v1/callback/orders/webhook": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Webhook/Notification
         * @description Called by Adyen to react on webhooks
         */
        post: operations["Webhook"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/checkout/v1/orders/{order_id}/payments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new Adyen Checkout order
         * @description Requires an existing Norce order.
         */
        post: operations["CreateAdyenCheckoutOrderPayment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/checkout/v1/orders/{order_id}/payments/{payment_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an existing Adyen Checkout order
         * @description Used to get an existing Adyen Checkout Order with payment methods.
         */
        get: operations["GetAdyenCheckoutOrderPayment"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/checkout/v1/orders/{order_id}/payments/{payment_id}/details": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Submit additional payment details to complete the Adyen Checkout payment.
         * @description Submit additional payment details to complete the Adyen Checkout payment.
         */
        post: operations["PostAdyenCompleteDetails"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/checkout/v1/orders/{order_id}/payments/{payment_id}/remove": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Remove an Adyen Checkout order
         * @description Requires an existing Norce order. Will do soft delete on any payments or shippings by setting state to removed. Will delete any hooks added when creating a Adyen Checkout order.
         */
        post: operations["RemoveAdyenCheckoutOrder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/checkout/v1/orders/{order_id}/payments/{payment_id}/transaction": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Start a transaction
         * @description Sends payment parameters (like amount, country, and currency) together with other required input details collected from the shopper.
         */
        post: operations["PostAdyenPaymentTransaction"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/checkout/v1/orders/{order_id}/payments/recurring/subscription/complete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Complete an order using a recurring payment token
         * @description Complete an order using a recurring payment token.
         */
        post: operations["CompleteRecurringOrder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
};
export type webhooks = Record<string, never>;
export type components = {
    schemas: {
        "Adyen.Model.Checkout.Amount": {
            currency?: string;
            /** Format: int64 */
            value?: number;
        };
        "Adyen.Model.Checkout.CheckoutOrderResponse": {
            amount?: components["schemas"]["Adyen.Model.Checkout.Amount"];
            expiresAt?: string;
            orderData?: string;
            pspReference?: string;
            reference?: string;
            remainingAmount?: components["schemas"]["Adyen.Model.Checkout.Amount"];
        };
        "Adyen.Model.Checkout.FraudCheckResult": {
            /** Format: int32 */
            accountScore?: number;
            /** Format: int32 */
            checkId?: number;
            name?: string;
        };
        "Adyen.Model.Checkout.FraudResult": {
            /** Format: int32 */
            accountScore?: number;
            results?: components["schemas"]["Adyen.Model.Checkout.FraudCheckResult"][];
        };
        "Adyen.Model.Checkout.InputDetail": {
            _Configuration?: {
                [key: string]: string | null;
            };
            details?: components["schemas"]["Adyen.Model.Checkout.SubInputDetail"][];
            /** @deprecated */
            inputDetails?: components["schemas"]["Adyen.Model.Checkout.SubInputDetail"][];
            items?: components["schemas"]["Adyen.Model.Checkout.Item"][];
            itemSearchUrl?: string;
            key?: string;
            optional?: boolean;
            type?: string;
            value?: string;
        };
        "Adyen.Model.Checkout.Item": {
            id?: string;
            name?: string;
        };
        "Adyen.Model.Checkout.PaymentDetailsResponse": {
            additionalData?: {
                [key: string]: string | null;
            };
            amount?: components["schemas"]["Adyen.Model.Checkout.Amount"];
            donationToken?: string;
            fraudResult?: components["schemas"]["Adyen.Model.Checkout.FraudResult"];
            merchantReference?: string;
            order?: components["schemas"]["Adyen.Model.Checkout.CheckoutOrderResponse"];
            paymentMethod?: components["schemas"]["Adyen.Model.Checkout.ResponsePaymentMethod"];
            pspReference?: string;
            refusalReason?: string;
            refusalReasonCode?: string;
            resultCode?: components["schemas"]["Adyen.Model.Checkout.PaymentDetailsResponse+ResultCodeEnum"];
            shopperLocale?: string;
            threeDS2ResponseData?: components["schemas"]["Adyen.Model.Checkout.ThreeDS2ResponseData"];
            threeDS2Result?: components["schemas"]["Adyen.Model.Checkout.ThreeDS2Result"];
            threeDSPaymentData?: string;
        };
        /** @enum {string} */
        "Adyen.Model.Checkout.PaymentDetailsResponse+ResultCodeEnum": "authenticationFinished" | "authenticationNotRequired" | "authorised" | "cancelled" | "challengeShopper" | "error" | "identifyShopper" | "partiallyAuthorised" | "pending" | "presentToShopper" | "received" | "redirectShopper" | "refused" | "success";
        "Adyen.Model.Checkout.PaymentMethod": {
            _Configuration?: {
                [key: string]: string | null;
            };
            apps?: components["schemas"]["Adyen.Model.Checkout.PaymentMethodUPIApps"][];
            brand?: string;
            brands?: string[];
            fundingSource?: components["schemas"]["Adyen.Model.Checkout.PaymentMethod+FundingSourceEnum"];
            group?: components["schemas"]["Adyen.Model.Checkout.PaymentMethodGroup"];
            /** @deprecated */
            inputDetails?: components["schemas"]["Adyen.Model.Checkout.InputDetail"][];
            issuers?: components["schemas"]["Adyen.Model.Checkout.PaymentMethodIssuer"][];
            name?: string;
            type?: string;
        };
        /** @enum {string} */
        "Adyen.Model.Checkout.PaymentMethod+FundingSourceEnum": "credit" | "debit";
        "Adyen.Model.Checkout.PaymentMethodGroup": {
            name?: string;
            paymentMethodData?: string;
            type?: string;
        };
        "Adyen.Model.Checkout.PaymentMethodIssuer": {
            disabled?: boolean;
            id?: string;
            name?: string;
        };
        "Adyen.Model.Checkout.PaymentMethodsResponse": {
            paymentMethods?: components["schemas"]["Adyen.Model.Checkout.PaymentMethod"][];
            storedPaymentMethods?: components["schemas"]["Adyen.Model.Checkout.StoredPaymentMethod"][];
        };
        "Adyen.Model.Checkout.PaymentMethodUPIApps": {
            id?: string;
            name?: string;
        };
        "Adyen.Model.Checkout.PaymentResponse": {
            action?: components["schemas"]["Adyen.Model.Checkout.PaymentResponseAction"];
            additionalData?: {
                [key: string]: string | null;
            };
            amount?: components["schemas"]["Adyen.Model.Checkout.Amount"];
            donationToken?: string;
            fraudResult?: components["schemas"]["Adyen.Model.Checkout.FraudResult"];
            merchantReference?: string;
            order?: components["schemas"]["Adyen.Model.Checkout.CheckoutOrderResponse"];
            paymentMethod?: components["schemas"]["Adyen.Model.Checkout.ResponsePaymentMethod"];
            pspReference?: string;
            refusalReason?: string;
            refusalReasonCode?: string;
            resultCode?: components["schemas"]["Adyen.Model.Checkout.PaymentResponse+ResultCodeEnum"];
            threeDS2ResponseData?: components["schemas"]["Adyen.Model.Checkout.ThreeDS2ResponseData"];
            threeDS2Result?: components["schemas"]["Adyen.Model.Checkout.ThreeDS2Result"];
            threeDSPaymentData?: string;
        };
        /** @enum {string} */
        "Adyen.Model.Checkout.PaymentResponse+ResultCodeEnum": "authenticationFinished" | "authenticationNotRequired" | "authorised" | "cancelled" | "challengeShopper" | "error" | "identifyShopper" | "partiallyAuthorised" | "pending" | "presentToShopper" | "received" | "redirectShopper" | "refused" | "success";
        "Adyen.Model.Checkout.PaymentResponseAction": {
            actualInstance?: unknown;
            readonly isNullable?: boolean;
            readonly schemaType?: string;
        };
        "Adyen.Model.Checkout.ResponsePaymentMethod": {
            brand?: string;
            type?: string;
        };
        "Adyen.Model.Checkout.StoredPaymentMethod": {
            bankAccountNumber?: string;
            bankLocationId?: string;
            brand?: string;
            expiryMonth?: string;
            expiryYear?: string;
            holderName?: string;
            iban?: string;
            id?: string;
            label?: string;
            lastFour?: string;
            name?: string;
            networkTxReference?: string;
            ownerName?: string;
            shopperEmail?: string;
            supportedRecurringProcessingModels?: string[];
            supportedShopperInteractions?: string[];
            type?: string;
        };
        "Adyen.Model.Checkout.SubInputDetail": {
            _Configuration?: {
                [key: string]: string | null;
            };
            items?: components["schemas"]["Adyen.Model.Checkout.Item"][];
            key?: string;
            optional?: boolean;
            type?: string;
            value?: string;
        };
        "Adyen.Model.Checkout.ThreeDS2ResponseData": {
            acsChallengeMandated?: string;
            acsOperatorID?: string;
            acsReferenceNumber?: string;
            acsSignedContent?: string;
            acsTransID?: string;
            acsURL?: string;
            authenticationType?: string;
            cardHolderInfo?: string;
            cavvAlgorithm?: string;
            challengeIndicator?: string;
            dsReferenceNumber?: string;
            dsTransID?: string;
            exemptionIndicator?: string;
            messageVersion?: string;
            riskScore?: string;
            sdkEphemPubKey?: string;
            threeDSServerTransID?: string;
            transStatus?: string;
            transStatusReason?: string;
        };
        "Adyen.Model.Checkout.ThreeDS2Result": {
            authenticationValue?: string;
            cavvAlgorithm?: string;
            challengeCancel?: components["schemas"]["Adyen.Model.Checkout.ThreeDS2Result+ChallengeCancelEnum"];
            dsTransID?: string;
            eci?: string;
            exemptionIndicator?: components["schemas"]["Adyen.Model.Checkout.ThreeDS2Result+ExemptionIndicatorEnum"];
            messageVersion?: string;
            riskScore?: string;
            threeDSRequestorChallengeInd?: components["schemas"]["Adyen.Model.Checkout.ThreeDS2Result+ThreeDSRequestorChallengeIndEnum"];
            threeDSServerTransID?: string;
            timestamp?: string;
            transStatus?: string;
            transStatusReason?: string;
            whiteListStatus?: string;
        };
        /** @enum {string} */
        "Adyen.Model.Checkout.ThreeDS2Result+ChallengeCancelEnum": "_01" | "_02" | "_03" | "_04" | "_05" | "_06" | "_07";
        /** @enum {string} */
        "Adyen.Model.Checkout.ThreeDS2Result+ExemptionIndicatorEnum": "lowValue" | "secureCorporate" | "trustedBeneficiary" | "transactionRiskAnalysis";
        /** @enum {string} */
        "Adyen.Model.Checkout.ThreeDS2Result+ThreeDSRequestorChallengeIndEnum": "_01" | "_02" | "_03" | "_04" | "_05" | "_06";
        "Microsoft.AspNetCore.Mvc.ProblemDetails": {
            detail?: string;
            instance?: string;
            /** Format: int32 */
            status?: number;
            title?: string;
            type?: string;
        } & {
            [key: string]: unknown;
        };
        "Norce.Checkout.AdyenAdapter.Application.Order.Addon": {
            /** Format: double */
            price?: number;
            reference?: string;
        };
        "Norce.Checkout.AdyenAdapter.Application.Order.Address": {
            attributes?: {
                [key: string]: unknown;
            };
            careOf?: string;
            city?: string;
            country?: string;
            email?: string;
            familyName?: string;
            givenName?: string;
            nationalIdentificationNumber?: string;
            organizationIdentificationNumber?: string;
            organizationName?: string;
            phone?: string;
            postalCode?: string;
            reference?: string;
            region?: string;
            streetAddress?: string;
            streetAddress2?: string;
            type?: components["schemas"]["Norce.Checkout.AdyenAdapter.Application.Order.CustomerType"];
        };
        "Norce.Checkout.AdyenAdapter.Application.Order.Cart": {
            attributes?: {
                [key: string]: unknown;
            };
            discounts?: components["schemas"]["Norce.Checkout.AdyenAdapter.Application.Order.Discount"][];
            items?: components["schemas"]["Norce.Checkout.AdyenAdapter.Application.Order.CartItem"][];
            reference?: string;
            total?: components["schemas"]["Norce.Checkout.AdyenAdapter.Application.Order.Price"];
        };
        "Norce.Checkout.AdyenAdapter.Application.Order.CartItem": {
            attributes?: {
                [key: string]: unknown;
            };
            discounts?: components["schemas"]["Norce.Checkout.AdyenAdapter.Application.Order.Discount"][];
            id?: string;
            imageUrl?: string;
            name?: string;
            originalTotal?: components["schemas"]["Norce.Checkout.AdyenAdapter.Application.Order.Price"];
            price?: components["schemas"]["Norce.Checkout.AdyenAdapter.Application.Order.Price"];
            /** Format: int32 */
            quantity?: number;
            reference?: string;
            sku?: string;
            total?: components["schemas"]["Norce.Checkout.AdyenAdapter.Application.Order.Price"];
            unit?: string;
            url?: string;
            /** Format: double */
            vatRate?: number;
        };
        "Norce.Checkout.AdyenAdapter.Application.Order.Consent": {
            checked?: boolean;
            id?: string;
            required?: boolean;
            text?: string;
        };
        "Norce.Checkout.AdyenAdapter.Application.Order.Customer": {
            attributes?: {
                [key: string]: unknown;
            };
            billing?: components["schemas"]["Norce.Checkout.AdyenAdapter.Application.Order.Address"];
            shipping?: components["schemas"]["Norce.Checkout.AdyenAdapter.Application.Order.Address"];
            type?: components["schemas"]["Norce.Checkout.AdyenAdapter.Application.Order.CustomerType"];
        };
        /** @enum {string} */
        "Norce.Checkout.AdyenAdapter.Application.Order.CustomerType": "person" | "organization";
        "Norce.Checkout.AdyenAdapter.Application.Order.DeliveryDetails": {
            carrier?: string;
            class?: string;
            pickupLocation?: components["schemas"]["Norce.Checkout.AdyenAdapter.Application.Order.PickupLocation"];
            product?: components["schemas"]["Norce.Checkout.AdyenAdapter.Application.Order.Product"];
        };
        "Norce.Checkout.AdyenAdapter.Application.Order.Discount": {
            attributes?: {
                [key: string]: unknown;
            };
            code?: string;
            name?: string;
            type?: components["schemas"]["Norce.Checkout.AdyenAdapter.Application.Order.DiscountType"];
            value?: components["schemas"]["Norce.Checkout.AdyenAdapter.Application.Order.Price"];
        };
        /** @enum {string} */
        "Norce.Checkout.AdyenAdapter.Application.Order.DiscountType": "item" | "shipping";
        "Norce.Checkout.AdyenAdapter.Application.Order.Hook": {
            adapterId?: string;
            id?: string;
            invoke?: string;
            subscribeTo?: string;
            target?: string;
        };
        "Norce.Checkout.AdyenAdapter.Application.Order.NorceOrder": {
            attributes?: {
                [key: string]: unknown;
            };
            cart?: components["schemas"]["Norce.Checkout.AdyenAdapter.Application.Order.Cart"];
            channel?: string;
            consents?: components["schemas"]["Norce.Checkout.AdyenAdapter.Application.Order.Consent"][];
            country?: string;
            /** Format: date-time */
            created?: string;
            culture?: string;
            currency?: string;
            customer?: components["schemas"]["Norce.Checkout.AdyenAdapter.Application.Order.Customer"];
            hooks?: components["schemas"]["Norce.Checkout.AdyenAdapter.Application.Order.Hook"][];
            id?: string;
            /** Format: date-time */
            lastModified?: string;
            merchant?: string;
            payments?: components["schemas"]["Norce.Checkout.AdyenAdapter.Application.Order.Payment"][];
            reference?: string;
            shippings?: components["schemas"]["Norce.Checkout.AdyenAdapter.Application.Order.Shipping"][];
            state?: components["schemas"]["Norce.Checkout.AdyenAdapter.Application.Order.State"];
            total?: components["schemas"]["Norce.Checkout.AdyenAdapter.Application.Order.Price"];
        };
        /** @enum {string} */
        "Norce.Checkout.AdyenAdapter.Application.Order.OrderStatus": "checkout" | "processing" | "accepted" | "completed" | "declined";
        "Norce.Checkout.AdyenAdapter.Application.Order.Payment": {
            adapterId?: string;
            /** Format: double */
            amount?: number;
            attributes?: {
                [key: string]: unknown;
            };
            channel?: string;
            currency?: string;
            id?: string;
            merchant?: string;
            name?: string;
            orderId?: string;
            recurring?: components["schemas"]["Norce.Checkout.AdyenAdapter.Application.Order.Recurring"];
            reference?: string;
            state?: components["schemas"]["Norce.Checkout.AdyenAdapter.Application.Order.PaymentState"];
            type?: components["schemas"]["Norce.Checkout.AdyenAdapter.Application.Order.PaymentType"];
            /** Format: double */
            upperLimitAmount?: number;
        };
        /** @enum {string} */
        "Norce.Checkout.AdyenAdapter.Application.Order.PaymentState": "intent" | "removed" | "processing" | "failed" | "confirmed" | "pending" | "declined" | "reserved" | "credited" | "captured" | "cancelled";
        /** @enum {string} */
        "Norce.Checkout.AdyenAdapter.Application.Order.PaymentType": "default" | "prepaid" | "voucher";
        "Norce.Checkout.AdyenAdapter.Application.Order.PickupLocation": {
            address?: components["schemas"]["Norce.Checkout.AdyenAdapter.Application.Order.PickupLocationAddress"];
            name?: string;
            reference?: string;
        };
        "Norce.Checkout.AdyenAdapter.Application.Order.PickupLocationAddress": {
            city?: string;
            country?: string;
            postalCode?: string;
            streetAddress?: string;
        };
        "Norce.Checkout.AdyenAdapter.Application.Order.Price": {
            /** Format: double */
            excludingVat?: number;
            /** Format: double */
            includingVat?: number;
        };
        "Norce.Checkout.AdyenAdapter.Application.Order.Product": {
            name?: string;
            reference?: string;
        };
        "Norce.Checkout.AdyenAdapter.Application.Order.Recurring": {
            attributes?: {
                [key: string]: unknown;
            };
            description?: string;
            token?: string;
        };
        "Norce.Checkout.AdyenAdapter.Application.Order.Shipping": {
            adapterId?: string;
            addons?: components["schemas"]["Norce.Checkout.AdyenAdapter.Application.Order.Addon"][];
            attributes?: {
                [key: string]: unknown;
            };
            channel?: string;
            deliveryDetails?: components["schemas"]["Norce.Checkout.AdyenAdapter.Application.Order.DeliveryDetails"];
            id?: string;
            merchant?: string;
            name?: string;
            orderId?: string;
            reference?: string;
            state?: components["schemas"]["Norce.Checkout.AdyenAdapter.Application.Order.ShippingState"];
            tmsReference?: string;
            total?: components["schemas"]["Norce.Checkout.AdyenAdapter.Application.Order.Price"];
            /** Format: double */
            vatRate?: number;
        };
        /** @enum {string} */
        "Norce.Checkout.AdyenAdapter.Application.Order.ShippingState": "intent" | "removed" | "processing" | "failed" | "confirmed";
        "Norce.Checkout.AdyenAdapter.Application.Order.State": {
            currentStatus?: components["schemas"]["Norce.Checkout.AdyenAdapter.Application.Order.OrderStatus"];
            transitions?: components["schemas"]["Norce.Checkout.AdyenAdapter.Application.Order.Transition"][];
        };
        "Norce.Checkout.AdyenAdapter.Application.Order.Transition": {
            status?: components["schemas"]["Norce.Checkout.AdyenAdapter.Application.Order.OrderStatus"];
            /** Format: date-time */
            timeStamp?: string;
        };
        "Norce.Checkout.AdyenAdapter.WebApi.Models.AdyenCheckoutAmount": {
            currency?: string;
            /**
             * Format: double
             * @description Amount in minor units
             */
            value?: number;
        };
        /** @enum {string} */
        "Norce.Checkout.AdyenAdapter.WebApi.Models.AdyenCheckoutEnvironment": "test" | "live";
        "Norce.Checkout.AdyenAdapter.WebApi.Models.AdyenCheckoutOrder": {
            amount?: components["schemas"]["Norce.Checkout.AdyenAdapter.WebApi.Models.AdyenCheckoutAmount"];
            clientKey?: string;
            environment?: components["schemas"]["Norce.Checkout.AdyenAdapter.WebApi.Models.AdyenCheckoutEnvironment"];
            locale?: string;
            /** @description Norce Payment Id */
            paymentId?: string;
            paymentMethodsConfiguration?: unknown;
            paymentMethodsResponse?: components["schemas"]["Adyen.Model.Checkout.PaymentMethodsResponse"];
        };
        "Norce.Checkout.AdyenAdapter.WebApi.Models.AdyenCheckoutValidationErrorResponse": {
            declineReasonMessage?: string;
        };
        "Norce.Checkout.AdyenAdapter.WebApi.Models.AdyenError": {
            correlationId?: string;
            errorCode?: string;
            errorMessages?: string[];
        };
        "Norce.Checkout.AdyenAdapter.WebApi.Models.CompleteRecurringOrderRequest": {
            recurringPaymentToken?: string;
            recurringShopperReference?: string;
        };
        "Norce.Checkout.AdyenAdapter.WebApi.Models.Error": {
            /** @description Error if originating from Adyen */
            adyenError?: components["schemas"]["Norce.Checkout.AdyenAdapter.WebApi.Models.AdyenError"];
            /**
             * @description Error code
             * @example cart-not-found
             * @enum {string}
             */
            code?: "internal-server-error" | "unauthorized" | "conflict" | "configuration-error" | "configuration-not-found" | "order-not-found" | "order-error" | "order-bad-request" | "order-conflict" | "order-validation" | "shipping-not-found" | "shipping-error" | "payment-not-found" | "payment-error" | "payment-conflict" | "adyen-error" | "adyen-bad-request" | "adyen-validation" | "adyen-order-not-found" | "adyen-upstream-error" | "translation-not-found";
            /**
             * @description Detailed error information
             * @example Cart with id:{id} now found.
             */
            message?: string;
        };
        "Norce.Checkout.AdyenAdapter.WebApi.Models.PatchOperation": {
            op?: string;
            path?: string;
            value?: unknown;
        };
        "Norce.Checkout.AdyenAdapter.WebApi.Models.ValidationError": {
            adapterId?: string;
            code?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
};
export type AdyenModelCheckoutAmount = components['schemas']['Adyen.Model.Checkout.Amount'];
export type AdyenModelCheckoutCheckoutOrderResponse = components['schemas']['Adyen.Model.Checkout.CheckoutOrderResponse'];
export type AdyenModelCheckoutFraudCheckResult = components['schemas']['Adyen.Model.Checkout.FraudCheckResult'];
export type AdyenModelCheckoutFraudResult = components['schemas']['Adyen.Model.Checkout.FraudResult'];
export type AdyenModelCheckoutInputDetail = components['schemas']['Adyen.Model.Checkout.InputDetail'];
export type AdyenModelCheckoutItem = components['schemas']['Adyen.Model.Checkout.Item'];
export type AdyenModelCheckoutPaymentDetailsResponse = components['schemas']['Adyen.Model.Checkout.PaymentDetailsResponse'];
export type AdyenModelCheckoutPaymentDetailsResponseResultCodeEnum = components['schemas']['Adyen.Model.Checkout.PaymentDetailsResponse+ResultCodeEnum'];
export type AdyenModelCheckoutPaymentMethod = components['schemas']['Adyen.Model.Checkout.PaymentMethod'];
export type AdyenModelCheckoutPaymentMethodFundingSourceEnum = components['schemas']['Adyen.Model.Checkout.PaymentMethod+FundingSourceEnum'];
export type AdyenModelCheckoutPaymentMethodGroup = components['schemas']['Adyen.Model.Checkout.PaymentMethodGroup'];
export type AdyenModelCheckoutPaymentMethodIssuer = components['schemas']['Adyen.Model.Checkout.PaymentMethodIssuer'];
export type AdyenModelCheckoutPaymentMethodsResponse = components['schemas']['Adyen.Model.Checkout.PaymentMethodsResponse'];
export type AdyenModelCheckoutPaymentMethodUpiApps = components['schemas']['Adyen.Model.Checkout.PaymentMethodUPIApps'];
export type AdyenModelCheckoutPaymentResponse = components['schemas']['Adyen.Model.Checkout.PaymentResponse'];
export type AdyenModelCheckoutPaymentResponseResultCodeEnum = components['schemas']['Adyen.Model.Checkout.PaymentResponse+ResultCodeEnum'];
export type AdyenModelCheckoutPaymentResponseAction = components['schemas']['Adyen.Model.Checkout.PaymentResponseAction'];
export type AdyenModelCheckoutResponsePaymentMethod = components['schemas']['Adyen.Model.Checkout.ResponsePaymentMethod'];
export type AdyenModelCheckoutStoredPaymentMethod = components['schemas']['Adyen.Model.Checkout.StoredPaymentMethod'];
export type AdyenModelCheckoutSubInputDetail = components['schemas']['Adyen.Model.Checkout.SubInputDetail'];
export type AdyenModelCheckoutThreeDs2ResponseData = components['schemas']['Adyen.Model.Checkout.ThreeDS2ResponseData'];
export type AdyenModelCheckoutThreeDs2Result = components['schemas']['Adyen.Model.Checkout.ThreeDS2Result'];
export type AdyenModelCheckoutThreeDs2ResultChallengeCancelEnum = components['schemas']['Adyen.Model.Checkout.ThreeDS2Result+ChallengeCancelEnum'];
export type AdyenModelCheckoutThreeDs2ResultExemptionIndicatorEnum = components['schemas']['Adyen.Model.Checkout.ThreeDS2Result+ExemptionIndicatorEnum'];
export type AdyenModelCheckoutThreeDs2ResultThreeDsRequestorChallengeIndEnum = components['schemas']['Adyen.Model.Checkout.ThreeDS2Result+ThreeDSRequestorChallengeIndEnum'];
export type MicrosoftAspNetCoreMvcProblemDetails = components['schemas']['Microsoft.AspNetCore.Mvc.ProblemDetails'];
export type NorceCheckoutAdyenAdapterApplicationOrderAddon = components['schemas']['Norce.Checkout.AdyenAdapter.Application.Order.Addon'];
export type NorceCheckoutAdyenAdapterApplicationOrderAddress = components['schemas']['Norce.Checkout.AdyenAdapter.Application.Order.Address'];
export type NorceCheckoutAdyenAdapterApplicationOrderCart = components['schemas']['Norce.Checkout.AdyenAdapter.Application.Order.Cart'];
export type NorceCheckoutAdyenAdapterApplicationOrderCartItem = components['schemas']['Norce.Checkout.AdyenAdapter.Application.Order.CartItem'];
export type NorceCheckoutAdyenAdapterApplicationOrderConsent = components['schemas']['Norce.Checkout.AdyenAdapter.Application.Order.Consent'];
export type NorceCheckoutAdyenAdapterApplicationOrderCustomer = components['schemas']['Norce.Checkout.AdyenAdapter.Application.Order.Customer'];
export type NorceCheckoutAdyenAdapterApplicationOrderCustomerType = components['schemas']['Norce.Checkout.AdyenAdapter.Application.Order.CustomerType'];
export type NorceCheckoutAdyenAdapterApplicationOrderDeliveryDetails = components['schemas']['Norce.Checkout.AdyenAdapter.Application.Order.DeliveryDetails'];
export type NorceCheckoutAdyenAdapterApplicationOrderDiscount = components['schemas']['Norce.Checkout.AdyenAdapter.Application.Order.Discount'];
export type NorceCheckoutAdyenAdapterApplicationOrderDiscountType = components['schemas']['Norce.Checkout.AdyenAdapter.Application.Order.DiscountType'];
export type NorceCheckoutAdyenAdapterApplicationOrderHook = components['schemas']['Norce.Checkout.AdyenAdapter.Application.Order.Hook'];
export type NorceCheckoutAdyenAdapterApplicationOrderNorceOrder = components['schemas']['Norce.Checkout.AdyenAdapter.Application.Order.NorceOrder'];
export type NorceCheckoutAdyenAdapterApplicationOrderOrderStatus = components['schemas']['Norce.Checkout.AdyenAdapter.Application.Order.OrderStatus'];
export type NorceCheckoutAdyenAdapterApplicationOrderPayment = components['schemas']['Norce.Checkout.AdyenAdapter.Application.Order.Payment'];
export type NorceCheckoutAdyenAdapterApplicationOrderPaymentState = components['schemas']['Norce.Checkout.AdyenAdapter.Application.Order.PaymentState'];
export type NorceCheckoutAdyenAdapterApplicationOrderPaymentType = components['schemas']['Norce.Checkout.AdyenAdapter.Application.Order.PaymentType'];
export type NorceCheckoutAdyenAdapterApplicationOrderPickupLocation = components['schemas']['Norce.Checkout.AdyenAdapter.Application.Order.PickupLocation'];
export type NorceCheckoutAdyenAdapterApplicationOrderPickupLocationAddress = components['schemas']['Norce.Checkout.AdyenAdapter.Application.Order.PickupLocationAddress'];
export type NorceCheckoutAdyenAdapterApplicationOrderPrice = components['schemas']['Norce.Checkout.AdyenAdapter.Application.Order.Price'];
export type NorceCheckoutAdyenAdapterApplicationOrderProduct = components['schemas']['Norce.Checkout.AdyenAdapter.Application.Order.Product'];
export type NorceCheckoutAdyenAdapterApplicationOrderRecurring = components['schemas']['Norce.Checkout.AdyenAdapter.Application.Order.Recurring'];
export type NorceCheckoutAdyenAdapterApplicationOrderShipping = components['schemas']['Norce.Checkout.AdyenAdapter.Application.Order.Shipping'];
export type NorceCheckoutAdyenAdapterApplicationOrderShippingState = components['schemas']['Norce.Checkout.AdyenAdapter.Application.Order.ShippingState'];
export type NorceCheckoutAdyenAdapterApplicationOrderState = components['schemas']['Norce.Checkout.AdyenAdapter.Application.Order.State'];
export type NorceCheckoutAdyenAdapterApplicationOrderTransition = components['schemas']['Norce.Checkout.AdyenAdapter.Application.Order.Transition'];
export type NorceCheckoutAdyenAdapterWebApiModelsAdyenCheckoutAmount = components['schemas']['Norce.Checkout.AdyenAdapter.WebApi.Models.AdyenCheckoutAmount'];
export type NorceCheckoutAdyenAdapterWebApiModelsAdyenCheckoutEnvironment = components['schemas']['Norce.Checkout.AdyenAdapter.WebApi.Models.AdyenCheckoutEnvironment'];
export type NorceCheckoutAdyenAdapterWebApiModelsAdyenCheckoutOrder = components['schemas']['Norce.Checkout.AdyenAdapter.WebApi.Models.AdyenCheckoutOrder'];
export type NorceCheckoutAdyenAdapterWebApiModelsAdyenCheckoutValidationErrorResponse = components['schemas']['Norce.Checkout.AdyenAdapter.WebApi.Models.AdyenCheckoutValidationErrorResponse'];
export type NorceCheckoutAdyenAdapterWebApiModelsAdyenError = components['schemas']['Norce.Checkout.AdyenAdapter.WebApi.Models.AdyenError'];
export type NorceCheckoutAdyenAdapterWebApiModelsCompleteRecurringOrderRequest = components['schemas']['Norce.Checkout.AdyenAdapter.WebApi.Models.CompleteRecurringOrderRequest'];
export type NorceCheckoutAdyenAdapterWebApiModelsError = components['schemas']['Norce.Checkout.AdyenAdapter.WebApi.Models.Error'];
export type NorceCheckoutAdyenAdapterWebApiModelsPatchOperation = components['schemas']['Norce.Checkout.AdyenAdapter.WebApi.Models.PatchOperation'];
export type NorceCheckoutAdyenAdapterWebApiModelsValidationError = components['schemas']['Norce.Checkout.AdyenAdapter.WebApi.Models.ValidationError'];
export type $defs = Record<string, never>;
export interface operations {
    CartChanged: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Channel identifier
                 * @example 1
                 */
                "x-channel": string;
                /**
                 * @description Merchant identifier.
                 * @example norce
                 */
                "x-merchant": string;
            };
            path: {
                /** @description Order identifier */
                order_id: string;
                /** @description Payment identifier */
                payment_id: string;
            };
            cookie?: never;
        };
        /** @description Updated Norce order */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Norce.Checkout.AdyenAdapter.Application.Order.NorceOrder"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Norce.Checkout.AdyenAdapter.WebApi.Models.PatchOperation"][];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
                };
            };
        };
    };
    ShippingChanged: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Channel identifier
                 * @example 1
                 */
                "x-channel": string;
                /**
                 * @description Merchant identifier.
                 * @example norce
                 */
                "x-merchant": string;
            };
            path: {
                /** @description Order identifier */
                order_id: string;
                /** @description Payment identifier */
                payment_id: string;
            };
            cookie?: never;
        };
        /** @description Updated Norce order */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Norce.Checkout.AdyenAdapter.Application.Order.NorceOrder"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Norce.Checkout.AdyenAdapter.WebApi.Models.PatchOperation"][];
                };
            };
        };
    };
    UpdatePayment: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Channel identifier
                 * @example 1
                 */
                "x-channel": string;
                /**
                 * @description Merchant identifier.
                 * @example norce
                 */
                "x-merchant": string;
            };
            path: {
                /** @description Order identifier */
                order_id: string;
                /** @description Payment identifier */
                payment_id: string;
            };
            cookie?: never;
        };
        /** @description Updated order */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Norce.Checkout.AdyenAdapter.Application.Order.NorceOrder"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Norce.Checkout.AdyenAdapter.WebApi.Models.PatchOperation"][];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
                };
            };
        };
    };
    Validate: {
        parameters: {
            query: {
                /** @description Merchant channel */
                channel: string;
                /** @description Merchant identifier */
                merchant: string;
            };
            header?: never;
            path: {
                /** @description Order identifier */
                order_id: string;
                /** @description Payment identifier */
                payment_id: string;
            };
            cookie?: never;
        };
        /** @description Adyen order */
        requestBody?: {
            content: {
                "application/json": unknown;
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Norce.Checkout.AdyenAdapter.WebApi.Models.AdyenCheckoutValidationErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Norce.Checkout.AdyenAdapter.WebApi.Models.Error"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Norce.Checkout.AdyenAdapter.WebApi.Models.Error"];
                };
            };
        };
    };
    Webhook: {
        parameters: {
            query: {
                /** @description Merchant channel */
                channel: string;
                /** @description Merchant identifier */
                merchant: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Adyen notification JSON data */
        requestBody?: {
            content: {
                "application/json": unknown;
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    CreateAdyenCheckoutOrderPayment: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Channel identifier
                 * @example 1
                 */
                "x-channel": string;
                /**
                 * @description Merchant identifier.
                 * @example norce
                 */
                "x-merchant": string;
            };
            path: {
                /** @description Order identifier */
                order_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Norce.Checkout.AdyenAdapter.WebApi.Models.AdyenCheckoutOrder"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Norce.Checkout.AdyenAdapter.WebApi.Models.Error"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Norce.Checkout.AdyenAdapter.WebApi.Models.Error"];
                };
            };
        };
    };
    GetAdyenCheckoutOrderPayment: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Channel identifier
                 * @example 1
                 */
                "x-channel": string;
                /**
                 * @description Merchant identifier.
                 * @example norce
                 */
                "x-merchant": string;
            };
            path: {
                /** @description Order identifier */
                order_id: string;
                /** @description Payment identifier */
                payment_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Norce.Checkout.AdyenAdapter.WebApi.Models.AdyenCheckoutOrder"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
                };
            };
        };
    };
    PostAdyenCompleteDetails: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Channel identifier
                 * @example 1
                 */
                "x-channel": string;
                /**
                 * @description Merchant identifier.
                 * @example norce
                 */
                "x-merchant": string;
            };
            path: {
                /** @description Order identifier */
                order_id: string;
                /** @description Payment identifier */
                payment_id: string;
            };
            cookie?: never;
        };
        /** @description Additional Adyen payment details */
        requestBody?: {
            content: {
                "application/json": unknown;
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Adyen.Model.Checkout.PaymentDetailsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
                };
            };
        };
    };
    RemoveAdyenCheckoutOrder: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Channel identifier
                 * @example 1
                 */
                "x-channel": string;
                /**
                 * @description Merchant identifier.
                 * @example norce
                 */
                "x-merchant": string;
            };
            path: {
                /** @description Order identifier */
                order_id: string;
                /** @description Payment identifier */
                payment_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Norce.Checkout.AdyenAdapter.WebApi.Models.Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Norce.Checkout.AdyenAdapter.WebApi.Models.Error"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
                };
            };
        };
    };
    PostAdyenPaymentTransaction: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Channel identifier
                 * @example 1
                 */
                "x-channel": string;
                /**
                 * @description Merchant identifier.
                 * @example norce
                 */
                "x-merchant": string;
            };
            path: {
                /** @description Order identifier */
                order_id: string;
                /** @description Payment identifier */
                payment_id: string;
            };
            cookie?: never;
        };
        /** @description Transaction data from Adyen front-end */
        requestBody?: {
            content: {
                "application/json": unknown;
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Adyen.Model.Checkout.PaymentResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Norce.Checkout.AdyenAdapter.WebApi.Models.ValidationError"][];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
                };
            };
        };
    };
    CompleteRecurringOrder: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Channel identifier
                 * @example 1
                 */
                "x-channel": string;
                /**
                 * @description Merchant identifier.
                 * @example norce
                 */
                "x-merchant": string;
            };
            path: {
                /** @description Order identifier */
                order_id: string;
            };
            cookie?: never;
        };
        /** @description Recurring payment token information */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Norce.Checkout.AdyenAdapter.WebApi.Models.CompleteRecurringOrderRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Adyen.Model.Checkout.PaymentResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
                };
            };
        };
    };
}
